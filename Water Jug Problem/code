class WaterJugProblem:
    def __init__(self, jug1_capacity, jug2_capacity, target_amount):
        self.jug1_capacity = jug1_capacity
        self.jug2_capacity = jug2_capacity
        self.target_amount = target_amount
        self.visited_states = set()

    def is_valid_state(self, state):
        jug1, jug2 = state
        return 0 <= jug1 <= self.jug1_capacity and 0 <= jug2 <= self.jug2_capacity

    def is_goal_state(self, state):
        return state[0] == self.target_amount or state[1] == self.target_amount

    def get_successors(self, state):
        jug1, jug2 = state
        successors = []

        # Fill jug 1
        successors.append((self.jug1_capacity, jug2))

        # Fill jug 2
        successors.append((jug1, self.jug2_capacity))

        # Empty jug 1
        successors.append((0, jug2))

        # Empty jug 2
        successors.append((jug1, 0))

        # Pour water from jug 1 to jug 2
        pour_amount = min(jug1, self.jug2_capacity - jug2)
        successors.append((jug1 - pour_amount, jug2 + pour_amount))

        # Pour water from jug 2 to jug 1
        pour_amount = min(self.jug1_capacity - jug1, jug2)
        successors.append((jug1 + pour_amount, jug2 - pour_amount))

        return [s for s in successors if self.is_valid_state(s)]

    def depth_first_search(self, state):
        if self.is_goal_state(state):
            return [state]

        self.visited_states.add(state)
        for successor in self.get_successors(state):
            if successor not in self.visited_states:
                result = self.depth_first_search(successor)
                if result:
                    return [state] + result

        return None

    def solve(self):
        initial_state = (0, 0)
        solution = self.depth_first_search(initial_state)
        return solution


# Example usage:
jug_problem = WaterJugProblem(jug1_capacity=4, jug2_capacity=3, target_amount=2)
solution_path = jug_problem.solve()

if solution_path:
    print("Solution found:")
    for step, state in enumerate(solution_path):
        print(f"Step {step + 1}: Jug 1 = {state[0]}, Jug 2 = {state[1]}")
else:
    print("No solution found.")
